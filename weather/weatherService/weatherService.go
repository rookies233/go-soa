// Code generated by gowsdl DO NOT EDIT.

package weatherService

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type GetSupportCity struct {
	XMLName xml.Name `xml:"http://WebXml.com.cn/ getSupportCity"`

	ByProvinceName string `xml:"byProvinceName,omitempty" json:"byProvinceName,omitempty"`
}

type GetSupportCityResponse struct {
	XMLName xml.Name `xml:"http://WebXml.com.cn/ getSupportCityResponse"`

	GetSupportCityResult *ArrayOfString `xml:"getSupportCityResult,omitempty" json:"getSupportCityResult,omitempty"`
}

type GetSupportProvince struct {
	XMLName xml.Name `xml:"http://WebXml.com.cn/ getSupportProvince"`
}

type GetSupportProvinceResponse struct {
	XMLName xml.Name `xml:"http://WebXml.com.cn/ getSupportProvinceResponse"`

	GetSupportProvinceResult *ArrayOfString `xml:"getSupportProvinceResult,omitempty" json:"getSupportProvinceResult,omitempty"`
}

type GetSupportDataSet struct {
	XMLName xml.Name `xml:"http://WebXml.com.cn/ getSupportDataSet"`
}

type GetSupportDataSetResponse struct {
	XMLName xml.Name `xml:"http://WebXml.com.cn/ getSupportDataSetResponse"`

	GetSupportDataSetResult struct {
		// Schema *Schema `xml:"schema,omitempty" json:"schema,omitempty"`
	} `xml:"getSupportDataSetResult,omitempty" json:"getSupportDataSetResult,omitempty"`
}

type GetWeatherbyCityName struct {
	XMLName xml.Name `xml:"http://WebXml.com.cn/ getWeatherbyCityName"`

	TheCityName string `xml:"theCityName,omitempty" json:"theCityName,omitempty"`
}

type GetWeatherbyCityNameResponse struct {
	XMLName xml.Name `xml:"http://WebXml.com.cn/ getWeatherbyCityNameResponse"`

	GetWeatherbyCityNameResult *ArrayOfString `xml:"getWeatherbyCityNameResult,omitempty" json:"getWeatherbyCityNameResult,omitempty"`
}

type GetWeatherbyCityNamePro struct {
	XMLName xml.Name `xml:"http://WebXml.com.cn/ getWeatherbyCityNamePro"`

	TheCityName string `xml:"theCityName,omitempty" json:"theCityName,omitempty"`

	TheUserID string `xml:"theUserID,omitempty" json:"theUserID,omitempty"`
}

type GetWeatherbyCityNameProResponse struct {
	XMLName xml.Name `xml:"http://WebXml.com.cn/ getWeatherbyCityNameProResponse"`

	GetWeatherbyCityNameProResult *ArrayOfString `xml:"getWeatherbyCityNameProResult,omitempty" json:"getWeatherbyCityNameProResult,omitempty"`
}

type DataSet struct {
	XMLName xml.Name `xml:"http://WebXml.com.cn/ DataSet"`

	// Schema *Schema `xml:"schema,omitempty" json:"schema,omitempty"`

	Items []string `xml:",any" json:"items,omitempty"`
}

type ArrayOfString struct {
	Astring []*string `xml:"string,omitempty" json:"string,omitempty"`
}

type WeatherWebServiceSoap interface {

	/* <br /><h3>查询本天气预报Web Services支持的国内外城市或地区信息</h3><p>输入参数：byProvinceName = 指定的洲或国内的省份，若为ALL或空则表示返回全部城市；返回数据：一个一维字符串数组 String()，结构为：城市名称(城市代码)。</p><br /> */
	GetSupportCity(request *GetSupportCity) (*GetSupportCityResponse, error)

	GetSupportCityContext(ctx context.Context, request *GetSupportCity) (*GetSupportCityResponse, error)

	/* <br /><h3>获得本天气预报Web Services支持的洲、国内外省份和城市信息</h3><p>输入参数：无； 返回数据：一个一维字符串数组 String()，内容为洲或国内省份的名称。</p><br /> */
	GetSupportProvince(request *GetSupportProvince) (*GetSupportProvinceResponse, error)

	GetSupportProvinceContext(ctx context.Context, request *GetSupportProvince) (*GetSupportProvinceResponse, error)

	/* <br><h3>获得本天气预报Web Services支持的洲、国内外省份和城市信息</h3><p>输入参数：无；返回：DataSet 。DataSet.Tables(0) 为支持的洲和国内省份数据，DataSet.Tables(1) 为支持的国内外城市或地区数据。DataSet.Tables(0).Rows(i).Item("ID") 主键对应 DataSet.Tables(1).Rows(i).Item("ZoneID") 外键。<br />Tables(0)：ID = ID主键，Zone = 支持的洲、省份；Tables(1)：ID 主键，ZoneID = 对应Tables(0)ID的外键，Area = 城市或地区，AreaCode = 城市或地区代码。</p><br /> */
	GetSupportDataSet(request *GetSupportDataSet) (*GetSupportDataSetResponse, error)

	GetSupportDataSetContext(ctx context.Context, request *GetSupportDataSet) (*GetSupportDataSetResponse, error)

	/* <br><h3>根据城市或地区名称查询获得未来三天内天气情况、现在的天气实况、天气和生活指数</h3><p>调用方法如下：输入参数：theCityName = 城市中文名称(国外城市可用英文)或城市代码(不输入默认为上海市)，如：上海 或 58367，如有城市名称重复请使用城市代码查询(可通过 getSupportCity 或 getSupportDataSet 获得)；返回数据： 一个一维数组 String(22)，共有23个元素。<br />String(0) 到 String(4)：省份，城市，城市代码，城市图片名称，最后更新时间。String(5) 到 String(11)：当天的 气温，概况，风向和风力，天气趋势开始图片名称(以下称：图标一)，天气趋势结束图片名称(以下称：图标二)，现在的天气实况，天气和生活指数。String(12) 到 String(16)：第二天的 气温，概况，风向和风力，图标一，图标二。String(17) 到 String(21)：第三天的 气温，概况，风向和风力，图标一，图标二。String(22) 被查询的城市或地区的介绍 <br /><a href="http://www.webxml.com.cn/images/weather.zip">下载天气图标<img src="http://www.webxml.com.cn/images/download_w.gif" border="0" align="absbottom" /></a>(包含大、中、小尺寸) <a href="http://www.webxml.com.cn/zh_cn/weather_icon.aspx" target="_blank">天气图例说明</a> <a href="http://www.webxml.com.cn/files/weather_eg.zip">调用此天气预报Web Services实例下载</a> (VB ASP.net 2.0)</p><br /> */
	GetWeatherbyCityName(request *GetWeatherbyCityName) (*GetWeatherbyCityNameResponse, error)

	GetWeatherbyCityNameContext(ctx context.Context, request *GetWeatherbyCityName) (*GetWeatherbyCityNameResponse, error)

	/* <br><h3>根据城市或地区名称查询获得未来三天内天气情况、现在的天气实况、天气和生活指数（For商业用户）</h3><p>调用方法同 getWeatherbyCityName，输入参数：theUserID = 商业用户ID</p><br /> */
	GetWeatherbyCityNamePro(request *GetWeatherbyCityNamePro) (*GetWeatherbyCityNameProResponse, error)

	GetWeatherbyCityNameProContext(ctx context.Context, request *GetWeatherbyCityNamePro) (*GetWeatherbyCityNameProResponse, error)
}

type weatherWebServiceSoap struct {
	client *soap.Client
}

func NewWeatherWebServiceSoap(client *soap.Client) WeatherWebServiceSoap {
	return &weatherWebServiceSoap{
		client: client,
	}
}

func (service *weatherWebServiceSoap) GetSupportCityContext(ctx context.Context, request *GetSupportCity) (*GetSupportCityResponse, error) {
	response := new(GetSupportCityResponse)
	err := service.client.CallContext(ctx, "http://WebXml.com.cn/getSupportCity", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *weatherWebServiceSoap) GetSupportCity(request *GetSupportCity) (*GetSupportCityResponse, error) {
	return service.GetSupportCityContext(
		context.Background(),
		request,
	)
}

func (service *weatherWebServiceSoap) GetSupportProvinceContext(ctx context.Context, request *GetSupportProvince) (*GetSupportProvinceResponse, error) {
	response := new(GetSupportProvinceResponse)
	err := service.client.CallContext(ctx, "http://WebXml.com.cn/getSupportProvince", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *weatherWebServiceSoap) GetSupportProvince(request *GetSupportProvince) (*GetSupportProvinceResponse, error) {
	return service.GetSupportProvinceContext(
		context.Background(),
		request,
	)
}

func (service *weatherWebServiceSoap) GetSupportDataSetContext(ctx context.Context, request *GetSupportDataSet) (*GetSupportDataSetResponse, error) {
	response := new(GetSupportDataSetResponse)
	err := service.client.CallContext(ctx, "http://WebXml.com.cn/getSupportDataSet", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *weatherWebServiceSoap) GetSupportDataSet(request *GetSupportDataSet) (*GetSupportDataSetResponse, error) {
	return service.GetSupportDataSetContext(
		context.Background(),
		request,
	)
}

func (service *weatherWebServiceSoap) GetWeatherbyCityNameContext(ctx context.Context, request *GetWeatherbyCityName) (*GetWeatherbyCityNameResponse, error) {
	response := new(GetWeatherbyCityNameResponse)
	err := service.client.CallContext(ctx, "http://WebXml.com.cn/getWeatherbyCityName", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *weatherWebServiceSoap) GetWeatherbyCityName(request *GetWeatherbyCityName) (*GetWeatherbyCityNameResponse, error) {
	return service.GetWeatherbyCityNameContext(
		context.Background(),
		request,
	)
}

func (service *weatherWebServiceSoap) GetWeatherbyCityNameProContext(ctx context.Context, request *GetWeatherbyCityNamePro) (*GetWeatherbyCityNameProResponse, error) {
	response := new(GetWeatherbyCityNameProResponse)
	err := service.client.CallContext(ctx, "http://WebXml.com.cn/getWeatherbyCityNamePro", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *weatherWebServiceSoap) GetWeatherbyCityNamePro(request *GetWeatherbyCityNamePro) (*GetWeatherbyCityNameProResponse, error) {
	return service.GetWeatherbyCityNameProContext(
		context.Background(),
		request,
	)
}

type WeatherWebServiceHttpGet interface {

	/* <br /><h3>查询本天气预报Web Services支持的国内外城市或地区信息</h3><p>输入参数：byProvinceName = 指定的洲或国内的省份，若为ALL或空则表示返回全部城市；返回数据：一个一维字符串数组 String()，结构为：城市名称(城市代码)。</p><br /> */
	GetSupportCity(request *string) (*ArrayOfString, error)

	GetSupportCityContext(ctx context.Context, request *string) (*ArrayOfString, error)

	/* <br /><h3>获得本天气预报Web Services支持的洲、国内外省份和城市信息</h3><p>输入参数：无； 返回数据：一个一维字符串数组 String()，内容为洲或国内省份的名称。</p><br /> */
	GetSupportProvince() (*ArrayOfString, error)

	GetSupportProvinceContext(ctx context.Context) (*ArrayOfString, error)

	/* <br><h3>获得本天气预报Web Services支持的洲、国内外省份和城市信息</h3><p>输入参数：无；返回：DataSet 。DataSet.Tables(0) 为支持的洲和国内省份数据，DataSet.Tables(1) 为支持的国内外城市或地区数据。DataSet.Tables(0).Rows(i).Item("ID") 主键对应 DataSet.Tables(1).Rows(i).Item("ZoneID") 外键。<br />Tables(0)：ID = ID主键，Zone = 支持的洲、省份；Tables(1)：ID 主键，ZoneID = 对应Tables(0)ID的外键，Area = 城市或地区，AreaCode = 城市或地区代码。</p><br /> */
	GetSupportDataSet() (*DataSet, error)

	GetSupportDataSetContext(ctx context.Context) (*DataSet, error)

	/* <br><h3>根据城市或地区名称查询获得未来三天内天气情况、现在的天气实况、天气和生活指数</h3><p>调用方法如下：输入参数：theCityName = 城市中文名称(国外城市可用英文)或城市代码(不输入默认为上海市)，如：上海 或 58367，如有城市名称重复请使用城市代码查询(可通过 getSupportCity 或 getSupportDataSet 获得)；返回数据： 一个一维数组 String(22)，共有23个元素。<br />String(0) 到 String(4)：省份，城市，城市代码，城市图片名称，最后更新时间。String(5) 到 String(11)：当天的 气温，概况，风向和风力，天气趋势开始图片名称(以下称：图标一)，天气趋势结束图片名称(以下称：图标二)，现在的天气实况，天气和生活指数。String(12) 到 String(16)：第二天的 气温，概况，风向和风力，图标一，图标二。String(17) 到 String(21)：第三天的 气温，概况，风向和风力，图标一，图标二。String(22) 被查询的城市或地区的介绍 <br /><a href="http://www.webxml.com.cn/images/weather.zip">下载天气图标<img src="http://www.webxml.com.cn/images/download_w.gif" border="0" align="absbottom" /></a>(包含大、中、小尺寸) <a href="http://www.webxml.com.cn/zh_cn/weather_icon.aspx" target="_blank">天气图例说明</a> <a href="http://www.webxml.com.cn/files/weather_eg.zip">调用此天气预报Web Services实例下载</a> (VB ASP.net 2.0)</p><br /> */
	GetWeatherbyCityName(request *string) (*ArrayOfString, error)

	GetWeatherbyCityNameContext(ctx context.Context, request *string) (*ArrayOfString, error)

	/* <br><h3>根据城市或地区名称查询获得未来三天内天气情况、现在的天气实况、天气和生活指数（For商业用户）</h3><p>调用方法同 getWeatherbyCityName，输入参数：theUserID = 商业用户ID</p><br /> */
	GetWeatherbyCityNamePro(request *string) (*ArrayOfString, error)

	GetWeatherbyCityNameProContext(ctx context.Context, request *string) (*ArrayOfString, error)
}

type weatherWebServiceHttpGet struct {
	client *soap.Client
}

func NewWeatherWebServiceHttpGet(client *soap.Client) WeatherWebServiceHttpGet {
	return &weatherWebServiceHttpGet{
		client: client,
	}
}

func (service *weatherWebServiceHttpGet) GetSupportCityContext(ctx context.Context, request *string) (*ArrayOfString, error) {
	response := new(ArrayOfString)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *weatherWebServiceHttpGet) GetSupportCity(request *string) (*ArrayOfString, error) {
	return service.GetSupportCityContext(
		context.Background(),
		request,
	)
}

func (service *weatherWebServiceHttpGet) GetSupportProvinceContext(ctx context.Context) (*ArrayOfString, error) {
	response := new(ArrayOfString)
	err := service.client.CallContext(ctx, "''", nil, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *weatherWebServiceHttpGet) GetSupportProvince() (*ArrayOfString, error) {
	return service.GetSupportProvinceContext(
		context.Background(),
	)
}

func (service *weatherWebServiceHttpGet) GetSupportDataSetContext(ctx context.Context) (*DataSet, error) {
	response := new(DataSet)
	err := service.client.CallContext(ctx, "''", nil, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *weatherWebServiceHttpGet) GetSupportDataSet() (*DataSet, error) {
	return service.GetSupportDataSetContext(
		context.Background(),
	)
}

func (service *weatherWebServiceHttpGet) GetWeatherbyCityNameContext(ctx context.Context, request *string) (*ArrayOfString, error) {
	response := new(ArrayOfString)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *weatherWebServiceHttpGet) GetWeatherbyCityName(request *string) (*ArrayOfString, error) {
	return service.GetWeatherbyCityNameContext(
		context.Background(),
		request,
	)
}

func (service *weatherWebServiceHttpGet) GetWeatherbyCityNameProContext(ctx context.Context, request *string) (*ArrayOfString, error) {
	response := new(ArrayOfString)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *weatherWebServiceHttpGet) GetWeatherbyCityNamePro(request *string) (*ArrayOfString, error) {
	return service.GetWeatherbyCityNameProContext(
		context.Background(),
		request,
	)
}

type WeatherWebServiceHttpPost interface {

	/* <br /><h3>查询本天气预报Web Services支持的国内外城市或地区信息</h3><p>输入参数：byProvinceName = 指定的洲或国内的省份，若为ALL或空则表示返回全部城市；返回数据：一个一维字符串数组 String()，结构为：城市名称(城市代码)。</p><br /> */
	GetSupportCity(request *string) (*ArrayOfString, error)

	GetSupportCityContext(ctx context.Context, request *string) (*ArrayOfString, error)

	/* <br /><h3>获得本天气预报Web Services支持的洲、国内外省份和城市信息</h3><p>输入参数：无； 返回数据：一个一维字符串数组 String()，内容为洲或国内省份的名称。</p><br /> */
	GetSupportProvince() (*ArrayOfString, error)

	GetSupportProvinceContext(ctx context.Context) (*ArrayOfString, error)

	/* <br><h3>获得本天气预报Web Services支持的洲、国内外省份和城市信息</h3><p>输入参数：无；返回：DataSet 。DataSet.Tables(0) 为支持的洲和国内省份数据，DataSet.Tables(1) 为支持的国内外城市或地区数据。DataSet.Tables(0).Rows(i).Item("ID") 主键对应 DataSet.Tables(1).Rows(i).Item("ZoneID") 外键。<br />Tables(0)：ID = ID主键，Zone = 支持的洲、省份；Tables(1)：ID 主键，ZoneID = 对应Tables(0)ID的外键，Area = 城市或地区，AreaCode = 城市或地区代码。</p><br /> */
	GetSupportDataSet() (*DataSet, error)

	GetSupportDataSetContext(ctx context.Context) (*DataSet, error)

	/* <br><h3>根据城市或地区名称查询获得未来三天内天气情况、现在的天气实况、天气和生活指数</h3><p>调用方法如下：输入参数：theCityName = 城市中文名称(国外城市可用英文)或城市代码(不输入默认为上海市)，如：上海 或 58367，如有城市名称重复请使用城市代码查询(可通过 getSupportCity 或 getSupportDataSet 获得)；返回数据： 一个一维数组 String(22)，共有23个元素。<br />String(0) 到 String(4)：省份，城市，城市代码，城市图片名称，最后更新时间。String(5) 到 String(11)：当天的 气温，概况，风向和风力，天气趋势开始图片名称(以下称：图标一)，天气趋势结束图片名称(以下称：图标二)，现在的天气实况，天气和生活指数。String(12) 到 String(16)：第二天的 气温，概况，风向和风力，图标一，图标二。String(17) 到 String(21)：第三天的 气温，概况，风向和风力，图标一，图标二。String(22) 被查询的城市或地区的介绍 <br /><a href="http://www.webxml.com.cn/images/weather.zip">下载天气图标<img src="http://www.webxml.com.cn/images/download_w.gif" border="0" align="absbottom" /></a>(包含大、中、小尺寸) <a href="http://www.webxml.com.cn/zh_cn/weather_icon.aspx" target="_blank">天气图例说明</a> <a href="http://www.webxml.com.cn/files/weather_eg.zip">调用此天气预报Web Services实例下载</a> (VB ASP.net 2.0)</p><br /> */
	GetWeatherbyCityName(request *string) (*ArrayOfString, error)

	GetWeatherbyCityNameContext(ctx context.Context, request *string) (*ArrayOfString, error)

	/* <br><h3>根据城市或地区名称查询获得未来三天内天气情况、现在的天气实况、天气和生活指数（For商业用户）</h3><p>调用方法同 getWeatherbyCityName，输入参数：theUserID = 商业用户ID</p><br /> */
	GetWeatherbyCityNamePro(request *string) (*ArrayOfString, error)

	GetWeatherbyCityNameProContext(ctx context.Context, request *string) (*ArrayOfString, error)
}

type weatherWebServiceHttpPost struct {
	client *soap.Client
}

func NewWeatherWebServiceHttpPost(client *soap.Client) WeatherWebServiceHttpPost {
	return &weatherWebServiceHttpPost{
		client: client,
	}
}

func (service *weatherWebServiceHttpPost) GetSupportCityContext(ctx context.Context, request *string) (*ArrayOfString, error) {
	response := new(ArrayOfString)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *weatherWebServiceHttpPost) GetSupportCity(request *string) (*ArrayOfString, error) {
	return service.GetSupportCityContext(
		context.Background(),
		request,
	)
}

func (service *weatherWebServiceHttpPost) GetSupportProvinceContext(ctx context.Context) (*ArrayOfString, error) {
	response := new(ArrayOfString)
	err := service.client.CallContext(ctx, "''", nil, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *weatherWebServiceHttpPost) GetSupportProvince() (*ArrayOfString, error) {
	return service.GetSupportProvinceContext(
		context.Background(),
	)
}

func (service *weatherWebServiceHttpPost) GetSupportDataSetContext(ctx context.Context) (*DataSet, error) {
	response := new(DataSet)
	err := service.client.CallContext(ctx, "''", nil, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *weatherWebServiceHttpPost) GetSupportDataSet() (*DataSet, error) {
	return service.GetSupportDataSetContext(
		context.Background(),
	)
}

func (service *weatherWebServiceHttpPost) GetWeatherbyCityNameContext(ctx context.Context, request *string) (*ArrayOfString, error) {
	response := new(ArrayOfString)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *weatherWebServiceHttpPost) GetWeatherbyCityName(request *string) (*ArrayOfString, error) {
	return service.GetWeatherbyCityNameContext(
		context.Background(),
		request,
	)
}

func (service *weatherWebServiceHttpPost) GetWeatherbyCityNameProContext(ctx context.Context, request *string) (*ArrayOfString, error) {
	response := new(ArrayOfString)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *weatherWebServiceHttpPost) GetWeatherbyCityNamePro(request *string) (*ArrayOfString, error) {
	return service.GetWeatherbyCityNameProContext(
		context.Background(),
		request,
	)
}
